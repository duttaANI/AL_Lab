#define ar array
class Solution {
public:
    static const int mxN = 320;
    int p[mxN],sz[mxN];
    int find(int x){
        return p[x]^x? p[x]=find(p[x]):x;
    }
    
    int join(int x, int y){
        if( (x=find(x)) == (y=find(y)) ){
            return 0;
        }
        p[x] = y;
        sz[y] += sz[x];
        return 1;
    }
    
    int size(int x){
        return sz[find(x)];
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        
        for(int i=0; i<mxN; ++i){
            sz[i]=1;
        }
        
        for(int i=0;i<n;++i){
            p[i]=i;
        }
        
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                if( graph[i][j] ){
                    join(i,j);
                }
            }
        }
        
        // for(int i=0;i<n;++i){
        //     cout << p[i] <<" ";
        // }
        // cout << endl;
        
        vector<int> count(n,0);
        
        for(int node : initial){
            count[find(node)]++;
        }
        
        int ans = -1, ansSize = -1;
        for (int node: initial) {
            int root = find(node);
            if (count[root] == 1) {  // check if there is only one malware in component
                int rootSize = size(root);
                if (rootSize > ansSize) {
                    ansSize = rootSize;
                    ans = node;
                } else if (rootSize == ansSize && node < ans) {
                    ansSize = rootSize;
                    ans = node;
                }
            }
        }
        
        if (ans == -1) {
            ans = INT_MAX;
            for (int node: initial)
                ans = min(ans, node);
        }
        return ans;
        
        return 0;
    }
};